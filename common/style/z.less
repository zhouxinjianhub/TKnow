// =============================================
// @des:            zless
// @author:         Busy
// @url:            www.aibusy.com
// @time:           2013-12-08
// @lastTime      2014-03-08
// @version         0.3 beta
// =============================================

// common reset use kissy reset
.reset(){
  *{margin:0; padding:0;}
  ul,ol{list-style:none;}
  img{border:none;}
  input,select,textarea{outline:none; border:none; background:none;}
  textarea{resize:none;}
  a{text-decoration:none;}
}
.reset-sina(){
  html, body, ul, li, ol, dl, dd, dt, p, h1, h2, h3, h4, h5, h6, form, fieldset, legend, img { margin:0; padding:0; }
  fieldset, img { border:none; }
  img{display: block;}
  address, caption, cite, code, dfn, th, var { font-style:normal; font-weight:normal; }
  ul, ol { list-style:none; }
  input { padding-top:0; padding-bottom:0; font-family: "SimSun","宋体";}
  input::-moz-focus-inner { border:none; padding:0; }
  select, input { vertical-align:middle; }
  select, input, textarea { font-size:12px; margin:0; }
  input[type="text"], input[type="password"], textarea { outline-style:none; -webkit-appearance:none; }
  textarea { resize:none; }
  input,textarea{background: none; border: none;}
  table { border-collapse:collapse; }
  body { color:#333; font:12px/20px "SimSun","宋体","Arial Narrow",HELVETICA; background:#fff; }
  a { color:#666; text-decoration:none; }
  a:visited { color:#666; }
  a:hover, a:active, a:focus { color:#ff8400; text-decoration:underline; }
}
.maxBody(@width:100%,@height:100%){
  width: @width;
  height: @height;
}
//去除a和label的虚线
.remove_dotted(){
  a,label {blr:~'expression(this.onFocus=this.blur())'}
  a,label {outline:none;}
}
//浮动
.fl(@f:left;){
    float: @f;
    display: inline;
}
.fr(@f:right){
  float: @f;
  display: inline;
}
//定位
.rel(@rel:relative){
  position: @rel;
}
.abs(@abs:absolute){
  position: @abs;
}
.fix(@fix:fixed){
  position: @fix;
}
//全局定位
.pos (r){
  position: relative;
}
.pos (a){
  position: absolute;
}
.pos (f){
  position: fixed;
}
.pos-box(@w:500px,@h:400px,@pos:absolute){
  width: @w;
  height: @h;
  position: @pos;
  left:0;
  top:0;
}
//定位居中
.pos-box-cc(@w:600px,@h:360px,@pos:absolute){
  width: @w;
  height: @h;
  position: @pos;
  left: 50%;
  top: 50%;
  margin-left: -@w / 2;
  margin-top: -@h / 2;
}
//布局
.bc(){
  margin-left: auto;
  margin-right: auto;
}
.bc-d(@w:500px){
  width: @w;
  .bc();
}
.wh(@w){
  width: @w;
  height: @w;
}
.w-be-h(@w){
  width: @w;
  height: @w;
}
.z-index(@index:1){
  z-index: @index;
}
//高度100%
.h100(){
  height: 100%;
}
//文字垂直居中
.txt-ver(@h){
  height: @h;
  line-height: @h;
}
// 同.txt-ver
.l-h(@h)
{
  height: @h;
  line-height: @h;
}
.l-height(@h)
{
  line-height: @h;
}
.b-sizing(){
  -moz-box-sizing:border-box;
  -webkit-box-sizing:border-box;
  box-sizing:border-box;
}
//display
.d-b(){
  display: block;
}
.d-i(){
  display: inline;
}
.d-ib(){
  display: inline-block;
}
.d-ib7(){
  display: inline-block;
  *display: inline;
  *zoom:1;
}
.d-t(){
  display:table;
}
.d-n(){
  display: none;
}

// display:flex兼容
// 子元素-平均分栏
.flex(@flex:1) {
    -webkit-box-flex: @flex;      // OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-flex: @flex;         // OLD - Firefox 19- */
    -webkit-flex: @flex;          // Chrome */
    -ms-flex: @flex;              // IE 10 */
    flex: @flex;                  // NEW, Spec - Opera 12.1, Firefox 20+ */
}
// 父元素-横向排列（主轴）
.d-flex-h(){
    display: box;              // OLD - Android 4.4- */

    display: -webkit-box;      // OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box;         // OLD - Firefox 19- (buggy but mostly works) */
    display: -ms-flexbox;      // TWEENER - IE 10 */
    display: -webkit-flex;     // NEW - Chrome */
    display: flex;             // NEW, Spec - Opera 12.1, Firefox 20+ */


    // 09版
    -webkit-box-orient: horizontal;
    // 12版
    -webkit-flex-direction: row;
    -moz-flex-direction: row;
    -ms-flex-direction: row;
    -o-flex-direction: row;
    flex-direction: row;
}

// 父元素-横向换行
.flex-hw(){
    // 09版 */
    // -webkit-box-lines: multiple;*/
    // 12版 */
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    -o-flex-wrap: wrap;
    flex-wrap: wrap;
}
// 父元素-水平居中（主轴是横向才生效）
.flex-hc(@content:center){
    // 09版 */
    -webkit-box-pack: @content;
    // 12版 */
    -webkit-justify-content: @content;
    -moz-justify-content: @content;
    -ms-justify-content: @content;
    -o-justify-content: @content;
    justify-content: @content;
    /* 其它取值如下：
        align-items     主轴原点方向对齐
        flex-end        主轴延伸方向对齐
        space-between   等间距排列，首尾不留白
        space-around    等间距排列，首尾留白
     */
}
// 父元素-纵向排列（主轴）
.d-flex-v(){
    display: box;              // LD - Android 4.4- */

    display: -webkit-box;      // OLD - iOS 6-, Safari 3.1-6 */
    display: -moz-box;         // OLD - Firefox 19- (buggy but mostly works) */
    display: -ms-flexbox;      // TWEENER - IE 10 */
    display: -webkit-flex;     // NEW - Chrome */
    display: flex;             // NEW, Spec - Opera 12.1, Firefox 20+ */


    // 09版 */
    -webkit-box-orient: vertical;
    // 12版 */
    -webkit-flex-direction: column;
    -moz-flex-direction: column;
    -ms-flex-direction: column;
    -o-flex-direction: column;
    flex-direction: column;
}
// 父元素-纵向换行
.flex-vw(){
    // 09版 */
    // -webkit-box-lines: multiple;*/
    // 12版 */
    -webkit-flex-wrap: wrap;
    -moz-flex-wrap: wrap;
    -ms-flex-wrap: wrap;
    -o-flex-wrap: wrap;
    flex-wrap: wrap;
}
// 父元素-竖直居中（主轴是横向才生效）
.flex-vc(@content:center){
    //  09版 */
    -webkit-box-align: @content;
    //  12版 */
    -webkit-align-items: @content;
    -moz-align-items: @content;
    -ms-align-items: @content;
    -o-align-items: @content;
    align-items: @content;
     /* 其它取值如下：
        flex-start    项目位于容器的开头。
        flex-end      项目位于容器的结尾。
        baseline   项目位于容器的基线上。
        center    项目位于容器的中心。
     */
}
// 子元素-显示在从左向右（从上向下）第1个位置，用于改变源文档顺序显示
.flex-order(@key:1){
    -webkit-box-ordinal-group: @key;   //  OLD - iOS 6-, Safari 3.1-6 */
    -moz-box-ordinal-group: @key;      //  OLD - Firefox 19- */
    -ms-flex-order: @key;              //  TWEENER - IE 10 */
    -webkit-order: @key;               //  NEW - Chrome */
    order: @key;                       //  NEW, Spec - Opera 12.1, Firefox 20+ */
}

//font family
.font-fm(){
  font-family: "Microsoft Yahei ui","微软雅黑";
}
.font-fs(){
  font-family: "SimSun","宋体";
}
.font-fa(){
  font-family: "Arial";
}
.font-fv(){
  font-family:Verdana;
}

.txt-overflowed(){
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

//font weight
.font-w700(){
  font-weight: 700;
}
.font-wb(){
  font-weight: bold;
}
.font-w400(){
  font-weight: 400;
}
.font-wn(){
  font-weight: normal;
}
//font size
.font-s(@p: 12px){
  font-size: @p;
}

//background
.bg(@url)
{
  background: url(@url) 0 0 repeat;
}
.bg-m(@url,@x:0,@y:0,@repeat:no-repeat)
{
  background: url(@url) @x @y @repeat;
}
.bgi(@url)
{
  background-image: url(@url);
}
.bgp(@x:0,@y:0){
  background-position: @x @y;
}
.bgr-r(){
  background-repeat: repeat;
}
.bgr-x(){
  background-repeat: repeat-x;
}
.bgr-y(){
  background-repeat: repeat-y;
}
.bgr-no(){
  background-repeat: no-repeat;
}
.bga-fix(){
  background-attachment: fixed;
}
.bga-size(@width:100%,@height:100%){
  -webkit-background-size: @width @height;
  -moz-background-size: @width @height;
  -o-background-size: @width @height;
  background-size: @width @height;
}

//lis
.list-sn(){
  list-style: none;
}
//text
.text-n(@p: none){
  text-decoration: @p;
}
//添加下划线
.tu(){
  text-decoration: underline;
}
.tn(){
  text-decoration: none;
}
.tl(){
  text-align: left;
}
.text-l(){
  text-align: left;
}
.tc(){
  text-align: center;
}
.text-c(){
  text-align: center;
}
.tr(){
  text-align: right;
}
.text-r(){
  text-align: right;
}
//特殊需求
.min-width(@width){
  min-width: @width;
  _width:@width;
}
.max-width(@width,@id){
  max-width: @width;
  _width:~'expression(document.getElementById("@{id}").offsetHeight>parseInt("@{width}")?"@{width}": "auto")';
  overflow:hidden;
}
.min-height(@height){
  min-height: @height;
  _height:@height;
}
.max-height(@height,@id){
  max-height: @height;
  _height:~'expression(document.getElementById("@{id}").offsetHeight>parseInt("@{height}")?"@{height}": "auto")';
  overflow:hidden;
}
//三角
.triangle (top,@w:5px,@color:#ccc){
  border-style:solid dashed dashed dashed;
  border-color:@color transparent transparent transparent;
  border-width:@w;
}
.triangle (right,@w:5px,@color:#ccc){
  border-style:dashed solid dashed dashed;
  border-color:transparent @color transparent transparent;
  border-width:@w;
}
.triangle (bottom,@w:5px,@color:#ccc){
  border-style:dashed dashed solid dashed;
  border-color:transparent transparent @color transparent;
  border-width:@w;
}
.triangle (left,@w:5px,@color:#ccc){
  border-style:dashed dashed dashed solid;
  border-color:transparent transparent transparent @color;
  border-width:@w;
}
.triangle (@_,@w:5px,@color:#ccc){
  .triangle-compatible();
}
//边框附加内容
.triangle-compatible()
{
    width: 0; height: 0; overflow:hidden;
}
//单独方向
.triangle-b(@w:5px,@color:#ccc){
  border-style:solid dashed dashed dashed;
  border-color:@color transparent transparent transparent;
  border-width:@w;
  .triangle-compatible();
}
.triangle-l(@w:5px,@color:#ccc){
  border-style:dashed solid dashed dashed;
  border-color:transparent @color transparent transparent;
  border-width:@w;
  .triangle-compatible();
}
.triangle-t(@w:5px,@color:#ccc){
  border-style:dashed dashed solid dashed;
  border-color:transparent transparent @color transparent;
  border-width:@w;
  .triangle-compatible();
}
.triangle-r(@w:5px,@color:#ccc){
  border-style:dashed dashed dashed solid;
  border-color:transparent transparent transparent @color;
  border-width:@w;
  .triangle-compatible();
}
//透明度
.opa(@opacity: 80) {
  opacity: @opacity / 100;
  filter: ~"alpha(opacity=@{opacity})";
}
.rgba(@red, @green, @blue, @alpha:1){
        @filtercolor:`(_f = function(d){ var v = (parseInt(d)|0).toString(16);return v.length<2 ? "0"+v : v;},
                                        '#'+_f(@{alpha}*255) + _f(@{red}) + _f(@{green})+ _f(@{blue}))`;
        
        background-color: ~'rgba(@{red},@{green},@{blue},@{alpha})';
        -ms-filter:~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{filtercolor}',endColorstr='@{filtercolor}')";
        filter:~"progid:DXImageTransform.Microsoft.gradient(startColorstr='@{filtercolor}',endColorstr='@{filtercolor}')";        
}

.clearfix() {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}
//文字省略号
// @substract单位为%
.ellipsis-basic(){
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  .font-fa();
}
.ellipsis(@substract:0) {
  .ellipsis-basic();
  width:100% - @substract;
}

// =============================================
// .jumbotron {
//   .retina-image("/img/bg-1x.png", "/img/bg-2x.png", 100px, 100px);
// }
// =============================================


.retina-image(@file-1x, @file-2x, @width-1x, @height-1x) {
  background-image: url("@{file-1x}");

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (     -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url("@{file-2x}");
    background-size: @width-1x @height-1x;
  }
}

// =============================================
// 创建24列 自适应流式布局
// HTML结构:
// <div class="vl-fluid"> <div class="row-fluid"> <div class="span span6 first-child"></div> <div class="span span6"></div> <div class="span span6"></div> <div class="span span6"></div> </div> <div class="row-fluid"> <div class="span span8 first-child"></div> <div class="span span8"></div> <div class="span span8"></div> </div> <div class="row-fluid"> <div class="span span12 first-child"></div> <div class="span span12"></div> </div> </div>
// =============================================

.makeFluid(@colnum: 24, @colwidth: 30px, @margin: 10px){
  @gridColumns:             @colnum;
  @gridColumnWidth:         @colwidth;
  @gridGutterWidth:         @margin;
  @gridRowWidth:            (@gridColumns * @gridColumnWidth) + (@gridGutterWidth * (@gridColumns - 1));
  @fluidGridColumnWidth:    percentage(@gridColumnWidth/@gridRowWidth);
  @fluidGridGutterWidth:    percentage(@gridGutterWidth/@gridRowWidth);
  .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth) {

    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index); }
      .offset@{index}:first-child { .offsetFirstChild(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}

    .offset (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth*2);
      *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + (@fluidGridGutterWidth*2) - (.5 / @gridRowWidth * 100 * 1%);
    }

    .offsetFirstChild (@columns) {
      margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) + (@fluidGridGutterWidth);
      *margin-left: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%) + @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
    }

    .span (@columns) {
      width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1));
      *width: (@fluidGridColumnWidth * @columns) + (@fluidGridGutterWidth * (@columns - 1)) - (.5 / @gridRowWidth * 100 * 1%);
    }

    .row-fluid {
      width: 100%;
      .clearfix();
      .span {
        float: left;
        margin-left: @fluidGridGutterWidth;
        *margin-left: @fluidGridGutterWidth - (.5 / @gridRowWidth * 100 * 1%);
      }
      .first-child {
        margin-left: 0;
      }

      // Space grid-sized controls properly if multiple per line
      .controls-row [class*="span"] + [class*="span"] {
        margin-left: @fluidGridGutterWidth;
      }

      // generate .spanX and .offsetX
      .spanX (@gridColumns);
      .offsetX (@gridColumns);
    }
  }

  .vl-fluid{
    .fluid (@fluidGridColumnWidth, @fluidGridGutterWidth);
  }
}
// =============================================
// 创建栅格布局
// 默认950宽 24列 每列30px 间距10px
// html结构
// <div class="vl-grid"> <div class="row"> <div class="span span6"></div> <div class="span span6"></div> <div class="span span6"></div> <div class="span span6"></div> </div> <div class="row"> <div class="span span24"></div> </div> </div>
// =============================================
//栅格化

.makeGrid(@colnum: 24, @colwidth: 30, @margin: 10px){
  
  //列数
  @gridColumns:             @colnum;
  //每一列宽度
  @gridColumnWidth:         @colwidth;
  //间距
  @gridGutterWidth:         @margin;
  //行宽度 = (列数 * 每一列的宽度 ) + (margin * (列数-1));
  @gridRowWidth:            (@gridColumns * @gridColumnWidth) + (@gridGutterWidth * (@gridColumns - 1));

  //每一列的宽度 间距
  .gridX (@gridColumnWidth, @gridGutterWidth) {
    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}

    .offset (@columns) {
      margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
    }

    .span (@columns) {
      width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
    }

    .row {
      margin-left: @gridGutterWidth * -1;
      .clearfix();
    }

    .span{
      float: left;
      min-height: 1px; // prevent collapsing columns
      //background-color: #ccc; //this is a test - busy
      margin-left: @gridGutterWidth;
    }

    // generate .spanX and .offsetX
    .spanX (@gridColumns);
    .offsetX (@gridColumns);

  }
  .vl-grid{
    .gridX(@gridColumnWidth, @gridGutterWidth);
  }

}

// =============================================
// 创建Metro风格布局 
// 默认950宽 6列 每列150px 间距10px
// html结构
//<div class="vl-metro"> <div class="row"> <div class="span span2"> <div class="row"> <div class="span span2 line2"></div> <div class="span span2 line1"></div> </div> </div> <div class="span span2"> <div class="row"> <div class="span span1 line2"></div> <div class="span span1"> <div class="row"> <div class="span span1 line1"></div> <div class="span span1 line1"></div> </div> </div> </div> <div class="row"> <div class="span span2 line1"></div> </div> </div> <div class="span span2"> <div class="row"> <div class="span span2 line1"></div> <div class="span span2 line2"></div> </div> </div> </div> </div>
// =============================================

.makeMetro(@colnum: 6, @colwidth: 150px, @margin: 10px){
  
  @gridColumns:             @colnum;
  @gridColumnWidth:         @colwidth;
  @gridGutterWidth:         @margin;
  @gridRowWidth:            (@gridColumns * @gridColumnWidth) + (@gridGutterWidth * (@gridColumns - 1));


  .metroX (@gridColumnWidth, @gridGutterWidth) {
    .spanX (@index) when (@index > 0) {
      .span@{index} { .span(@index); }
      .spanX(@index - 1);
    }
    .spanX (0) {}
    .lineX (@index) when (@index > 0) {
      .line@{index} { .line(@index); }
      .lineX(@index - 1);
    }
    .lineX (0) {}

    .offsetX (@index) when (@index > 0) {
      .offset@{index} { .offset(@index); }
      .offsetX(@index - 1);
    }
    .offsetX (0) {}

    .offset (@columns) {
      margin-left: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns + 1));
    }

    .span (@columns) {
      width: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
    }
    .line (@columns){
      height: (@gridColumnWidth * @columns) + (@gridGutterWidth * (@columns - 1));
      margin-bottom: @margin;
    }

    .row {
      margin-left: @gridGutterWidth * -1;
      .clearfix();
    }

    .span{
      float: left;
      min-height: 1px; // prevent collapsing columns
      margin-left: @gridGutterWidth;
    }

    // generate .spanX and .offsetX
    .spanX (@gridColumns);
    .lineX (@gridColumns);
    .offsetX (@gridColumns);

  }
  .vl-metro{
    .metroX(@gridColumnWidth, @gridGutterWidth);
  }

}